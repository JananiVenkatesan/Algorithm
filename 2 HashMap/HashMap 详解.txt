Map (K, V)集 合 ( 与 Collection 平级 )

Map： 一次添加一对元素;  成为双列集合;  存储的是键值对，且必须保证键的唯一性;
空间复杂度 O(N)   时间复杂度  O(1) 


常用方法：
1 添加
value put(key, value)  返回前一个和 key 关联的值，如果没有，返回 null

2 删除
void clear();          清空 map 集合
value remove(key);     根据指定的 key 翻出这个键值对

3 判断
boolean containsKey(key);
boolean containsValue(value);
boolean isEmpty();

4 获取
value get(key);        通过键获取值，若无该键，返回 null。可以通过返回 null来判断时候包含指定键
int size();            获取键值对个数



Map的迭代方法（Map本身不具备迭代器）
方法一：

Map<Integer, String> map = new HashMap<Integer,String>();
Collection<String> values = map.values();  // 注意要给 Collection 添加泛型
Iterator<String> it = values.iterator();


方法二.1： 通过Map转成Set就可以迭代 
Map<Integer, String> map = new HashMap<Integer,String>();
for(Integer i : map.keySet()){
	String s = map.get(i);
}


方法二.2： 通过Map转成Set就可以迭代 — entrySet — public Set < Map.Entry<K,V> > entrySet();
   该方法将键和值的映射关系作为对象存储到了Set集合中， 而这个映射关系的类型就是Map.Entity 类型（结婚证）

Map<Integer, String> map = new HashMap<Integer,String>();
Iterator<Map.Entry<Integer,String>> it = map.entrySet().iterator();

while(it.hasNext()){
    Map.entry<Integer, String> me = it.next();

    Integer key = me.getKey();
    String value = me.getValue();
}


方法三
原理：通过keySet方法获取map中所有的键所在的Set集合，再通过Set的迭代器获取每一个键，再对每一个键获取其对应的值即可

Map<Integer, String> map = new HashMap<Integer,String>();
Set<Integer> keySet = map.keySet();
Iterator<Integer> it = keySet.iterator();

while(it.hasNext()){
    Integer key = it.next();
    String value = map.get(key);
}



